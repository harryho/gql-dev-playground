"A particular intergalactic location available for booking"
type Listing {
  id: ID!
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The number of beds available"
  numOfBeds: Int
  "The cost per night"
  costPerNight: Float
  "Indicates whether listing is closed for bookings (on hiatus)"
  closedForBookings: Boolean
  "The amenities available for this listing"
  amenities: [Amenity!]!
}

type Amenity {
  id: ID!
  "The amenity category the amenity belongs to"
  category: String!
  "The amenity's name"
  name: String!
}

type Query {
  "A curated array of listings to feature on the homepage"
  featuredListings: [Listing!]!
  "Returns the details about this listing"
  listing(id: ID!): Listing
}

type Mutation {
  "Creates a new listing"
  createListing(input: CreateListingInput!): CreateListingResponse!
}

input CreateListingInput {
  "The listing's title"
  title: String!
  "The listing's description"
  description: String!
  "The number of beds available"
  numOfBeds: Int!
  "The cost per night"
  costPerNight: Float!
  "Indicates whether listing is closed for bookings (on hiatus)"
  closedForBookings: Boolean
  "The Listing's amenities"
  amenities: [ID!]!
}

type CreateListingResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly created listing"
  listing: Listing
}

enum TaskState {
  TASK_INBOX
  TASK_PINNED
  TASK_SNOOZED
  TASK_ARCHIVED
}


type Task {
  id: ID!
  title: String!
  state: TaskState!
  subtitle: String
  url: String
  createdAt: Float
  updatedAt: Float
}

type TodoList {
  id: ID!
  title: String!
  state: TaskState!
  subtitle: String
  ownerId:String
  owner_id: String
  user: User
}


type User {
  id: ID!
  email: String!
  name: String!
  firstname: String
  lastname: String
  hasGitHubToken: Boolean
  hasTrelloToken: Boolean
  tasks(state: TaskState ): [Task!]
}

extend type Query {
  tasks: [Task!]
  task(id: ID!): Task
  user(id: ID!): User
  todoList: [TodoList!]
}



input CreateTaskInput {
  title: String!
  ownerId: ID!
  state: TaskState!
  subtitle: String
  url: String
}

input UpdateTaskInput {
  title: String!
  ownerId: ID!
  state: TaskState
  subtitle: String
  url: String
}

type CreateTaskResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly created listing"
  task: Task
}


type UpdateTaskResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The newly created listing"
  task: Task
}

extend type Mutation {
  createTask(input: CreateTaskInput!): CreateTaskResponse
  updateTask(input: UpdateTaskInput!): UpdateTaskResponse
}